CREATE TABLE STUDENTRSC/USERS                      
("User ID"  FOR COLUMN userID SMALLINT NOT NULL,   
"User Name" FOR COLUMN userName CHAR (10) NOT NULL,
"Password" FOR COLUMN password CHAR(64) NOT NULL,
PRIMARY KEY ( userID ))


CREATE TABLE STUDENTRSC/ACS_TOKEN
("User ID"  FOR COLUMN userID SMALLINT NOT NULL,
"Access_token" FOR COLUMN acs_token CHAR(64) NOT NULL,
PRIMARY KEY ( userID ))


create procedure ADD_USERT(IN USER_ID SMALLINT, IN USER_NAME CHAR(10), IN PASS_WORD CHAR(64), OUT httpSts SMALLINT)          
LANGUAGE SQL MODIFIES SQL DATA                                         
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
SET httpSts = SQLCODE;                                                              
INSERT INTO STUDENTRSC.USERS(USERID, USERNAME, PASSWORD) VALUES(USER_ID, USER_NAME, PASS_WORD);              
END


create procedure GET_USERT(IN USER_NAME CHAR(10), OUT USER_ID SMALLINT, OUT USER_NAMEO CHAR(10), OUT PASS_WORD CHAR(64),OUT httpSts SMALLINT)
LANGUAGE SQL READS SQL DATA                                         
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
SET httpSts = SQLCODE;  
SELECT userID, userName, password INTO USER_ID, USER_NAMEO, PASS_WORD FROM STUDENTRSC.USERS WHERE userName = USER_NAME;              
END


create procedure GET_USERWP(IN USER_NAME CHAR(10), IN PASS_WORD0 CHAR(64), OUT USER_ID SMALLINT, OUT USER_NAMEO CHAR(10), OUT PASS_WORD CHAR(64),OUT httpSts SMALLINT)                 
LANGUAGE SQL READS SQL DATA                                         
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
SET httpSts = SQLCODE;                                                             
SELECT userID, userName, password INTO USER_ID, USER_NAMEO, PASS_WORD FROM STUDENTRSC.USERS WHERE userName = USER_NAME AND PASSWORD = PASS_WORD0;   
END


create procedure ADD_KEY(IN USER_ID SMALLINT, IN ACSTOKEN CHAR(64), OUT httpSts SMALLINT)          
LANGUAGE SQL MODIFIES SQL DATA                                      
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
SET httpSts = SQLCODE;                                          
MERGE INTO STUDENTRSC.ACS_TOKEN AS t1
    USING (SELECT * FROM ACS_TOKEN (VALUES (USER_ID, ACSTOKEN))) AS t2(USERID, ACS_TOKEN)
    ON (t1.USERID =t2.USERID)
      WHEN MATCHED THEN
        UPDATE SET t1.ACS_TOKEN = t2.ACS_TOKEN
      WHEN NOT MATCHED THEN
        INSERT (USER_ID, ACSTOKEN) VALUES (t2.USERID, t2.ACS_TOKEN);           
END


create procedure GET_KEY(IN ACSTOKEN CHAR(64), OUT USER_ID SMALLINT, OUT httpSts SMALLINT)
LANGUAGE SQL READS SQL DATA                                         
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION, SQLWARNING, NOT FOUND
SET httpSts = SQLCODE;                                                          
SELECT userID INTO USER_ID FROM STUDENTRSC.ACS_TOKEN WHERE ACS_TOKEN = ACSTOKEN;              
END